{
  "name": "no-reply flow",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -60,
        260
      ],
      "id": "dc0bcb20-7e18-4fa5-8d08-2c3e879f926e",
      "name": "When clicking ‘Execute workflow’",
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=name of the customer: {{ $json['Lead name'] }}\nevent type: {{ $json['event type'] }}",
        "options": {
          "systemMessage": "You are the owner of a photo booth hire service. The company name is Harmony Booths. The email should be colorful. The tone should vary based on the event type:\n\ntone for the event: \nIf = Wedding (Luxury tone and colors)\n\nelse if = Birthday (Friendly tone and colors)\n\nelse if = other, do as you see fit.\n\n*You should only generate:\n1. Subject: ------------ (in plain text)\n2. body of the email in HTML notation for better email look: ------------\n\nThe email must include the following pricing details:\n£249 for 2 hours\n£299 for 3 hours\n£349 for 4 hours\n\nAlso, include a clear call-to-action, encouraging the customer to proceed with booking or ask for more information on this email \"rahatabir016@gmail.com\". Use professional yet warm language for weddings, and an energetic, upbeat style for birthdays.\n\nKeep in mind: \n-Do not generate more than what was asked.\n-Only generate the output, nothing more."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        380,
        260
      ],
      "id": "fbd949e4-769e-42d9-a1ba-fe2eb2346965",
      "name": "AI Agent",
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        380,
        440
      ],
      "id": "9562234f-6ba0-41e4-87a7-78987bea9414",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "key",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "sendTo": "={{ $('Read database').item.json['lead email'] }}",
        "subject": "={{ $json.subject }}",
        "message": "={{ $json.restOfText }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1080,
        240
      ],
      "id": "9f95881a-ce5f-4ebd-9fc7-69fc84cd8bd5",
      "name": "Send a message",
      "webhookId": "5cc16fdd-6029-49b8-b521-5e6b919f23d3",
      "credentials": {
        "gmailOAuth2": {
          "id": "s62rQ06FCqJLEWql",
          "name": "Gmail account 3"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "workspaceId": "key",
        "projectId": "key",
        "table": "key",
        "options": {}
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        80,
        720
      ],
      "id": "e45c4eed-87a8-4474-bef9-e9bf44d1798c",
      "name": "Get many rows1",
      "credentials": {
        "nocoDbApiToken": {
          "id": "key",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -100,
        720
      ],
      "id": "0023af41-9416-431c-ab0e-38a228270e96",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=name of the customer: {{ $json['Lead name'] }}\nevent type: {{ $json['event type'] }}",
        "options": {
          "systemMessage": "You are the owner of a photo booth hire service. The company name is Harmony Booths. The email should be colorful. The tone should vary based on the event type:\n\ntone for the event: \nIf = Wedding (Luxury tone and colors)\n\nelse if = Birthday (Friendly tone and colors)\n\nelse if = other, do as you see fit.\n\n*You should only generate:\n1. Subject: ------------ (in plain text)\n2. body of the email in HTML notation for better email look: ------------\n\nThe email must include the following pricing details:\n£249 for 2 hours\n£299 for 3 hours\n£349 for 4 hours\n\nAlso, include a clear call-to-action, encouraging the customer to proceed with booking or ask for more information on this email \"rahatabir016@gmail.com\". Use professional yet warm language for weddings, and an energetic, upbeat style for birthdays.\n\nKeep in mind: \n-Do not generate more than what was asked.\n-Only generate the output, nothing more."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        540,
        700
      ],
      "id": "70080186-334a-4505-b199-be7de55ca7cc",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        540,
        860
      ],
      "id": "2f50fd8c-332d-451d-a136-309722796255",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "aOjYsWSoHbArwmMY",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $('If1').item.json['lead email'] }}",
        "subject": "={{ $json.subject }}",
        "message": "={{ $json.restOfText }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1120,
        680
      ],
      "id": "eebe7732-3fc8-435e-800c-0e55c3f3d8a6",
      "name": "Send a message1",
      "webhookId": "5cc16fdd-6029-49b8-b521-5e6b919f23d3",
      "credentials": {
        "gmailOAuth2": {
          "id": "s62rQ06FCqJLEWql",
          "name": "Gmail account 3"
        }
      }
    },
    {
      "parameters": {
        "instructions": "Separate these two sections.\n\n1. Subject: \n2. rest of the text",
        "codeGeneratedForPrompt": "Separate these two sections.\n\n1. Subject: \n2. rest of the text",
        "jsCode": "const items = $input.all();\n\nconst separatedSections = items.map((item) => {\n  const output = item.json.output;\n  const splitOutput = output.split(\"\\n\");\n  const subject = splitOutput[0].replace(\"Subject: \", \"\");\n  const restOfText = splitOutput.slice(1).join(\"\\n\");\n  return {\n    subject,\n    restOfText,\n  };\n});\n\nreturn separatedSections;\n"
      },
      "type": "n8n-nodes-base.aiTransform",
      "typeVersion": 1,
      "position": [
        880,
        700
      ],
      "id": "ff64850d-9e58-4d61-b4af-9492b09bd012",
      "name": "AI Transform1"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "update",
        "workspaceId": "key",
        "projectId": "key",
        "table": "key",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "=Id",
              "fieldValue": "={{ $('If1').item.json.Id }}"
            },
            {
              "fieldName": "conversation history",
              "fieldValue": "=subject: {{ $json.subject }}\nemail: {{ $json.restOfText }}\ndate: {{ new Date() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        1400,
        760
      ],
      "id": "1a61f4bd-96a1-4f13-8bf9-34d10bf0b2dd",
      "name": "Update a row1",
      "credentials": {
        "nocoDbApiToken": {
          "id": "key",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "content": "## The first workflow\n**After form fill up** Collecting data and sending the initial msg's",
        "height": 420,
        "width": 1720
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2860,
        100
      ],
      "typeVersion": 1,
      "id": "a897c73d-9ad2-427d-b69f-2e9391bb4c4b",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "workspaceId": "wz9dqp98",
        "projectId": "key",
        "table": "key",
        "options": {}
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        160,
        260
      ],
      "id": "a0acfe95-6a8e-48f2-95c7-4e850be1a8a7",
      "name": "Read database",
      "credentials": {
        "nocoDbApiToken": {
          "id": "key",
          "name": "NocoDB Token account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "instructions": "Separate these two sections.\n\n1. Subject: \n2. rest of the text",
        "codeGeneratedForPrompt": "Separate these two sections.\n\n1. Subject: \n2. rest of the text",
        "jsCode": "const items = $input.all();\n\nconst separatedSections = items.map((item) => {\n  const output = item.json.output;\n  const splitOutput = output.split(\"\\n\");\n  const subject = splitOutput[0].replace(\"Subject: \", \"\");\n  const restOfText = splitOutput.slice(1).join(\"\\n\");\n  return {\n    subject,\n    restOfText,\n  };\n});\n\nreturn separatedSections;\n"
      },
      "type": "n8n-nodes-base.aiTransform",
      "typeVersion": 1,
      "position": [
        740,
        260
      ],
      "id": "f0bb726a-2445-41ae-9c98-9f028e98ae9d",
      "name": "Clean up output",
      "disabled": true
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "update",
        "workspaceId": "key",
        "projectId": "key",
        "table": "key",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "=Id",
              "fieldValue": "={{ $('Read database').item.json.Id }}"
            },
            {
              "fieldName": "conversation history",
              "fieldValue": "=subject: {{ $json.subject }}\nemail: {{ $json.restOfText }}\ndate: {{ new Date() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        1340,
        320
      ],
      "id": "9f4f1155-e1d5-465b-8b14-255ac64a0da2",
      "name": "update conversation",
      "credentials": {
        "nocoDbApiToken": {
          "id": "key",
          "name": "NocoDB Token account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "content": "## RE-KNOCK\n**checking if lead repiled** filtering out the on-reply and sending them another msg",
        "height": 680,
        "width": 1940,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2860,
        640
      ],
      "typeVersion": 1,
      "id": "f454a6a9-9961-4b70-ab66-46abaa052c35",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ (new Date().getTime() - new Date($json.CreatedAt).getTime()) / (1000 * 3600 * 24) === 2 }}",
              "value2": true
            },
            {
              "value1": "={{ (new Date().getTime() - new Date($json.CreatedAt).getTime()) / (1000 * 3600 * 24) === 5 }}",
              "value2": true
            },
            {
              "value1": "={{ (new Date().getTime() - new Date($json.CreatedAt).getTime()) / (1000 * 3600 * 24) === 10 }}",
              "value2": true
            },
            {
              "value1": "={{ (new Date().getTime() - new Date($json.CreatedAt).getTime()) / (1000 * 3600 * 24) % 14 === 0 }}",
              "value2": true
            },
            {
              "value1": "={{ $json['Lead status'] === 'New Leads' }}",
              "value2": true
            },
            {
              "value1": "={{ $json['Lead status'] === 'Ghosted' }}"
            }
          ]
        }
      },
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        280,
        720
      ],
      "id": "6537d84c-1bc5-40e1-b891-0b400e7cac06"
    },
    {
      "parameters": {
        "instructions": "remove all the HTML notation. words like HTML, head, body,css code, everything in {} and \"\\n\"",
        "codeGeneratedForPrompt": "remove all the HTML notation. words like HTML, head, body,css code, everything in {} and \"\\n\"",
        "jsCode": "const items = $input.all();\nconst updatedItems = items.map((item) => {\n  let cleanedText = item?.json?.restOfText.replace(/<[^>]*>/g, \"\");\n  cleanedText = cleanedText.replace(/```html/g, \"\");\n  cleanedText = cleanedText.replace(/```/g, \"\");\n  cleanedText = cleanedText.replace(/\\n/g, \"\");\n  cleanedText = cleanedText.replace(/({.*})/g, \"\");\n  item.json.restOfText = cleanedText;\n  return item;\n});\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.aiTransform",
      "typeVersion": 1,
      "position": [
        1080,
        420
      ],
      "id": "f8a5e5be-66b2-4759-9d53-bd8e9ea683bb",
      "name": "AI Transform",
      "disabled": true
    },
    {
      "parameters": {
        "instructions": "remove all the HTML notation. words like HTML, head, body,css code, everything in {} and \"\\n\"",
        "codeGeneratedForPrompt": "remove all the HTML notation. words like HTML, head, body,css code, everything in {} and \"\\n\"",
        "jsCode": "const items = $input.all();\nconst updatedItems = items.map((item) => {\n  let cleanedText = item?.json?.restOfText.replace(/<[^>]*>/g, \"\");\n  cleanedText = cleanedText.replace(/```html/g, \"\");\n  cleanedText = cleanedText.replace(/```/g, \"\");\n  cleanedText = cleanedText.replace(/\\n/g, \"\");\n  cleanedText = cleanedText.replace(/({.*})/g, \"\");\n  item.json.restOfText = cleanedText;\n  return item;\n});\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.aiTransform",
      "typeVersion": 1,
      "position": [
        1120,
        860
      ],
      "id": "f57a46b4-3de3-4f18-a6db-f3d8fd96b34c",
      "name": "AI Transform2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3e4f4020-3e43-4e67-a492-fc95fcaf7b6c",
              "leftValue": "={{ $json['Lead status'] }}",
              "rightValue": "={{ 'Closed' }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "b951d09e-874a-4850-b276-ea381ac23847",
              "leftValue": "={{ (new Date().getTime() - new Date($json.CreatedAt).getTime()) / (1000 * 3600 * 24)  }}",
              "rightValue": 2,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        280,
        1040
      ],
      "id": "ccbb92cb-a086-474a-8da5-2ff4295d8c9a",
      "name": "If"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=name of the customer: {{ $json['Lead name'] }}\nevent type: {{ $json['event type'] }}",
        "options": {
          "systemMessage": "You are the owner of a photo booth hire service. The company name is Harmony Booths. You are asking for a testimonial or review from a former client. \n\nWrite an email asking for a review.\n\nOnly output the subject and the email, nothing more."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        540,
        1020
      ],
      "id": "0602e5e4-198a-4f0b-99b1-36e398ec9baf",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        540,
        1180
      ],
      "id": "473b9ffd-cd4e-42e2-b86f-03f0e06d595b",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "key",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "instructions": "Separate the only the Subject line and the rest",
        "codeGeneratedForPrompt": "Separate the only the Subject line and the rest",
        "jsCode": "const items = $input.all();\nconst updatedItems = items.map((item) => {\n  const emailBody = item?.json?.output;\n  const splitEmail = emailBody.split(\"\\n\\n\");\n  const subjectLine = splitEmail[0];\n  const restOfEmail = splitEmail.slice(1).join(\"\\n\\n\");\n  return {\n    subject: subjectLine,\n    rest: restOfEmail,\n  };\n});\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.aiTransform",
      "typeVersion": 1,
      "position": [
        860,
        1020
      ],
      "id": "16d015f7-680d-4afe-97f6-5dfd23e4f7ec",
      "name": "AI Transform3"
    },
    {
      "parameters": {
        "sendTo": "={{ $('If').item.json.Id }}",
        "subject": "={{ $json.subject }}",
        "emailType": "text",
        "message": "={{ $json.rest }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1040,
        1020
      ],
      "id": "2d0c6e3d-5425-4946-b5c9-d1c938bce21f",
      "name": "Send a message2",
      "webhookId": "5cc16fdd-6029-49b8-b521-5e6b919f23d3",
      "credentials": {
        "gmailOAuth2": {
          "id": "s62rQ06FCqJLEWql",
          "name": "Gmail account 3"
        }
      }
    },
    {
      "parameters": {
        "content": "## stop sending and after the event date\n**Double click**",
        "height": 120,
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -280,
        1000
      ],
      "typeVersion": 1,
      "id": "6d1f2adc-d2d6-48de-ac8b-b6bc58f532d2",
      "name": "Sticky Note2"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Read database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Clean up output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get many rows1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get many rows1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "AI Transform1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Transform1": {
      "main": [
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Transform2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read database": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean up output": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Transform",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Transform": {
      "main": [
        [
          {
            "node": "update conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Transform2": {
      "main": [
        [
          {
            "node": "Update a row1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "AI Transform3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Transform3": {
      "main": [
        [
          {
            "node": "Send a message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f3f88080-bd07-47b1-9246-775e63eed9ed",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "02a7300900dff58ff67d68e47fea5bfddad5e95e430ab4d5e2dc431dd0d85888"
  },
  "id": "rloi9xKsM0yZztFd",
  "tags": []
}