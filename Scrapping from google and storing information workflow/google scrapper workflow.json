{
  "name": "My workflow 3",
  "nodes": [
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a multi-step research agent. Your goal is to find detailed contact information for businesses, including their E-Mail and Managing Director (Geschäftsführer), and then format it.\n\n**Your process MUST follow these steps:**\n\n1.  First, use the `HTTP_Request` tool to get a basic list of businesses based on the user's query. This gives you Name, Address, and Website URL.\n\n2.  For EACH business from the list, take its website URL and use the `Website_Scraper` tool to get the website's content.\n\n3.  From the scraped website content, you MUST find the company's `E-Mail` address and the name of the `Geschäftsführer` (Managing Director). This information is often on pages like \"Impressum\", \"Kontakt\", \"About Us\", or in the footer.\n\n4.  After you have gathered all the information (including the new details) for all businesses, you MUST output the complete data directly in the required JSON format. The entire output of your response should be ONLY the JSON array. Do not add any conversational text around it.\n\nThe required JSON format is:\n[\n  {\n    \"json\": {\n      \"Adresse\": \"...\",\n      \"Telefon\": \"'...\",\n      \"Name\": \"...\",\n      \"Webseite\": \"...\",\n      \"Bewertung\": \"...\",\n      \"E-Mail\": \"...\",\n      \"Geschäftsführer\": \"...\"\n    }\n  }\n]"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1248,
        3728
      ],
      "id": "90fe42f8-54f1-43d8-baf6-97d679bd4ec6",
      "name": "AI Agent",
      "disabled": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1120,
        3952
      ],
      "id": "abc537ab-7ef7-40ef-bb54-9b738da45d65",
      "name": "OpenAI Chat Model",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1280,
        3952
      ],
      "id": "9cdab856-bc9f-4ea7-b086-62d231c04ad2",
      "name": "Simple Memory",
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Dieses Tool ist dafür da, dir zu helfen, alle Kontaktdaten aus Google Maps für Lead Generierung zu scrapen. Input query 'q' for search input, 'Il' for latitude and longitude of the map's center, 'page' is for the current page.",
        "url": "https://google.serper.dev/maps",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
            },
            {
              "name": "ll",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            },
            {
              "name": "page",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', ``, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "key"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1424,
        3952
      ],
      "id": "d996b7f7-f99c-4735-9aa5-8ab0cbbaf04f",
      "name": "HTTP Request",
      "disabled": true
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        1008,
        4224
      ],
      "id": "bee1d496-b62e-413c-8026-cfdaa4a86280",
      "name": "When Executed by Another Workflow",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "return JSON.parse($input.all()[0).json.query);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        4224
      ],
      "id": "86dc653a-b429-4d8f-8453-ad7ef196cc34",
      "name": "Parse inhalt",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM",
          "mode": "list",
          "cachedResultName": "Praxis Coldcall",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Tabellenblatt1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "Adresse",
              "displayName": "Adresse",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Name",
              "displayName": "Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Telefon ",
              "displayName": "Telefon ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Webseite",
              "displayName": "Webseite",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Bewertung",
              "displayName": "Bewertung",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "E-Mail",
              "displayName": "E-Mail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Geschäftsführer",
              "displayName": "Geschäftsführer",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1440,
        4224
      ],
      "id": "2138a044-412d-4aef-ba6a-0e11b6ce8ef3",
      "name": "Append row in sheet",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "return {json:{responce: \"ok\"}};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1648,
        4224
      ],
      "id": "e374abb7-8856-4d76-bd51-832893bb51b3",
      "name": "Code",
      "disabled": true
    },
    {
      "parameters": {
        "description": "{\n  \"Adresse\": \"xxx\",\n  \"Telefon\": \"'xxx\",\n  \"Name\": \"xxx\",\n  \"Webseite\": \"xxx\",\n  \"Bewertung\": \"xxx\",\n  \"E-Mail\": \"xxx\",\n  \"Geschäftsführer\": \"xxx\"\n}",
        "workflowId": {
          "__rl": true,
          "value": "D59GMe94Vkwf9Oyu",
          "mode": "list",
          "cachedResultName": "Test 1"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1584,
        3952
      ],
      "id": "dd596fe7-c147-47c8-995c-1d088a26ed27",
      "name": "Call n8n Workflow Tool",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM",
          "mode": "list",
          "cachedResultName": "Praxis Coldcall",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Tabellenblatt1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "Name": "=",
            "Telefon ": "=",
            "Webseite": "=",
            "Bewertung": "=",
            "E-Mail": "=",
            "Geschäftsführer": "="
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Adresse",
              "displayName": "Adresse",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Name",
              "displayName": "Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Telefon ",
              "displayName": "Telefon ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Webseite",
              "displayName": "Webseite",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Bewertung",
              "displayName": "Bewertung",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "E-Mail",
              "displayName": "E-Mail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Geschäftsführer",
              "displayName": "Geschäftsführer",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1952,
        3728
      ],
      "id": "0f37bedf-6809-4521-b4c1-b9a550c1d55c",
      "name": "Append row in sheet1",
      "disabled": true
    },
    {
      "parameters": {
        "url": "={{ $parameters.url.startsWith('http') ? $parameters.url : 'https://' + $parameters.url }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {},
        "optimizeResponse": true,
        "responseType": "html"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1744,
        3952
      ],
      "id": "ac814692-1c43-4409-86af-ebb0ab5962f5",
      "name": "Website Scraper",
      "alwaysOutputData": false,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Get the messy output from the AI Agent\nconst agentOutput = $input.item.json.output;\n\n// Find the JSON array within the text using a regular expression\nconst jsonMatch = agentOutput.match(/(\\[[\\s\\S]*\\])/);\n\n// If a match is found, parse it into a real JSON object\nif (jsonMatch && jsonMatch[0]) {\n  try {\n    return JSON.parse(jsonMatch[0]);\n  } catch (e) {\n    // If parsing fails, return an empty array to prevent errors\n    return [];\n  }\n}\n\n// If no JSON is found, return an empty array\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1664,
        3728
      ],
      "id": "397cbfae-cd8d-479a-8271-fe2f439380a1",
      "name": "Code2",
      "disabled": true
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=Du bist ein fortschrittlicher, mehrstufiger Recherche-Agent. Dein Hauptziel ist es, eine Liste von 20 einzigartigen Geschäftskontakten basierend auf dem vom Benutzer angegebenen Stadtnamen und Geschäftstyp zu erstellen.\n\nDer Benutzer wird nur einen Stadtnamen und einen Geschäftstyp angeben (z. B. \"Berlin\", \"Unternehmensberatung\").\n\nDein Prozess MUSS diesen Schritten folgen:\n\nSuchanfrage erstellen: Kombiniere die Eingaben des Benutzers zu einer einzigen Suchanfrage. Führe alle Suchen ausschließlich in Deutschland durch. Formuliere deine Anfrage für das HTTP_Request-Tool so: [Geschäftstyp] in [Stadtname], Deutschland.\n\nBeispiel: Wenn der Benutzer \"Berlin\" und \"Unternehmensberatung\" eingibt, lautet deine Suchanfrage Unternehmensberatung in Berlin, Deutschland.\n\nDaten sammeln: Verwende das HTTP_Request-Tool mit der erstellten Suchanfrage, um eine Liste von Unternehmen zu erhalten. Du musst möglicherweise die Paginierungsfunktion des Tools nutzen, um die Zielanzahl von 20 Unternehmen zu erreichen.\n\nAnreichern: Für JEDES der 20 gefundenen Unternehmen MUSST du das Google Searcher-Tool verwenden, um die E-Mail-Adresse und den Namen des Geschäftsführers zu finden. Formuliere kluge Suchanfragen wie \"Kontakt E-Mail [Firmenname]\" oder \"Geschäftsführer [Firmenname] Impressum\".\n\nEndgültige Ausgabe: Nachdem du alle Informationen für 20 Unternehmen gesammelt hast, gib die vollständigen Daten direkt im geforderten JSON-Format aus. Deine gesamte Antwort darf NUR das JSON-Array sein. Füge keinen Konversationstext hinzu.\n\nDas geforderte JSON-Format ist:\n[\n  {\n    \"json\": {\n      \"Adresse\": \"...\",\n      \"Telefon\": \"'...\",\n      \"Name\": \"...\",\n      \"Webseite\": \"...\",\n      \"Bewertung\": \"...\",\n      \"E-Mail\": \"...\",\n      \"Geschäftsführer\": \"...\"\n    }\n  }\n]"
        }
      },
      "id": "550b3507-c345-4043-be3f-f38d67a938aa",
      "name": "AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1088,
        3008
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "id": "7c74b517-79cf-40cd-b7c1-42298a5a0c68",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        944,
        3232
      ]
    },
    {
      "parameters": {
        "contextWindowLength": 500
      },
      "id": "9a40316c-e07a-4b29-8e6c-8c12ad85c81e",
      "name": "Simple Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1104,
        3232
      ]
    },
    {
      "parameters": {
        "toolDescription": "Dieses Tool ist dafür da, dir zu helfen, alle Kontaktdaten aus Google Maps für Lead Generierung zu scrapen. Input query 'q' for search input, 'Il' for latitude and longitude of the map's center, 'page' is for the current page.",
        "url": "https://google.serper.dev/maps",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
            },
            {
              "name": "ll",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            },
            {
              "name": "page",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', ``, 'string') }}"
            },
            {
              "name": "num ",
              "value": "100"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "key"
            }
          ]
        },
        "options": {}
      },
      "id": "d77984a6-f48b-45f3-bffe-1207dbe65ea3",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1264,
        3232
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM",
          "mode": "list",
          "cachedResultName": "Praxis Coldcall",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Tabellenblatt1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Adresse": "={{ $json.Adresse }}",
            "Name": "={{ $json.Name }}",
            "Telefon ": "='{{ $json.Telefon }}",
            "Webseite": "={{ $json.Webseite }}",
            "Bewertung": "={{ $json.Bewertung }}",
            "E-Mail": "={{ $json['E-Mail'] }}",
            "Geschäftsführer": "={{ $json['Geschäftsführer'] }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Adresse",
              "displayName": "Adresse",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Name",
              "displayName": "Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Telefon ",
              "displayName": "Telefon ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Webseite",
              "displayName": "Webseite",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Bewertung",
              "displayName": "Bewertung",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "E-Mail",
              "displayName": "E-Mail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Geschäftsführer",
              "displayName": "Geschäftsführer",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "1eeca587-fe07-4827-a972-ba3804a09cfd",
      "name": "Append row in sheet2",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1808,
        3008
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the messy output from the AI Agent\nconst agentOutput = $input.item.json.output;\n\n// More robust JSON extraction\nlet jsonArray = [];\n\ntry {\n  // Try to find JSON array in the output\n  const jsonMatch = agentOutput.match(/\\[[\\s\\S]*?\\]/);\n  \n  if (jsonMatch) {\n    jsonArray = JSON.parse(jsonMatch[0]);\n    console.log(`Found ${jsonArray.length} items in JSON array`);\n  } else {\n    console.log(\"No JSON array found in output\");\n  }\n} catch (e) {\n  console.log(\"Error parsing JSON:\", e.message);\n  console.log(\"Raw output:\", agentOutput);\n}\n\nreturn jsonArray;"
      },
      "id": "3313e3bc-f3b4-4459-aca1-460b2cee58e7",
      "name": "Code3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1488,
        3008
      ]
    },
    {
      "parameters": {
        "url": "https://google.serper.dev/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `The search query for Google.`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "key"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "b7d5589b-6bed-4515-82c6-dc953479c202",
      "name": "Google Searcher",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1424,
        3232
      ]
    },
    {
      "parameters": {
        "jsCode": "return {json:{responce: \"fertig gesucht\"}};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2064,
        3008
      ],
      "id": "61264aa1-4d89-43be-8e9f-8bb74b099551",
      "name": "Code1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        704,
        3008
      ],
      "id": "ba7a82f6-99d6-44c8-af03-5ac09e4f1b6c",
      "name": "When chat message received",
      "webhookId": "9a45bc45-dc60-4c62-ac32-8c07d59e57e4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c4aa9161-85f2-472b-a9d9-b20cc4a8ccc0",
              "leftValue": "={{ $json.chatInput }}",
              "rightValue": "20",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        400,
        320
      ],
      "id": "4fa15ca3-6934-449a-afd8-348245953680",
      "name": "If",
      "disabled": true
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a multi-step research agent. Your goal is to find detailed contact information for businesses.\n\n**Your process MUST follow these steps:**\n\n1.  First, use the `HTTP_Request` tool to get a basic list of businesses from Google Maps. This gives you the official Name, Address, and Website.\n\n2.  For EACH business from that list, you MUST use the `Google Searcher` tool to find the company's E-Mail address and the name of the Managing Director (Geschäftsführer). You should formulate smart queries like `\"Contact email for [Company Name]\"` or `\"Geschäftsführer of [Company Name]\"`.\n\n3.  After gathering all the information, output the complete data directly in the required JSON format. Your entire response must be ONLY the JSON array. Do not add any conversational text.\n\nThe required JSON format is:\n[\n  {\n    \"json\": {\n      \"Adresse\": \"...\",\n      \"Telefon\": \"'...\",\n      \"Name\": \"...\",\n      \"Webseite\": \"...\",\n      \"Bewertung\": \"...\",\n      \"E-Mail\": \"...\",\n      \"Geschäftsführer\": \"...\"\n    }\n  }\n]\n\nYour response should have all the 20 informations you got from the `HTTP_Request1` tool and the `Google Searcher tool`"
        }
      },
      "id": "9223c90e-55bb-4ef1-98b3-e036dc87e9d9",
      "name": "AI Agent3",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1168,
        320
      ],
      "disabled": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "id": "2a34c4f8-2e14-428c-b511-5c478c168c0d",
      "name": "OpenAI Chat Model4",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1040,
        544
      ],
      "disabled": true
    },
    {
      "parameters": {
        "contextWindowLength": 500
      },
      "id": "1238ce3d-1def-467a-ab44-8e2ebfe94013",
      "name": "Simple Memory2",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1200,
        544
      ],
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Dieses Tool ist dafür da, dir zu helfen, alle Kontaktdaten aus Google Maps für Lead Generierung zu scrapen. Input query 'q' for search input, 'Il' for latitude and longitude of the map's center, 'page' is for the current page.",
        "url": "https://google.serper.dev/maps",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
            },
            {
              "name": "ll",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            },
            {
              "name": "page",
              "value": "1"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "key"
            }
          ]
        },
        "options": {}
      },
      "id": "042132ba-c8dd-4961-ab73-95a41050e19b",
      "name": "HTTP Request2",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1344,
        544
      ],
      "disabled": true
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM",
          "mode": "list",
          "cachedResultName": "Praxis Coldcall",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Tabellenblatt1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Adresse": "={{ $json.Adresse }}",
            "Name": "={{ $json.Name }}",
            "Telefon ": "='{{ $json.Telefon }}",
            "Webseite": "={{ $json.Webseite }}",
            "Bewertung": "={{ $json.Bewertung }}",
            "E-Mail": "={{ $json['E-Mail'] }}",
            "Geschäftsführer": "={{ $json['Geschäftsführer'] }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Adresse",
              "displayName": "Adresse",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Name",
              "displayName": "Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Telefon ",
              "displayName": "Telefon ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Webseite",
              "displayName": "Webseite",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Bewertung",
              "displayName": "Bewertung",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "E-Mail",
              "displayName": "E-Mail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Geschäftsführer",
              "displayName": "Geschäftsführer",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "7c48cd7d-60a4-4b44-9763-f34dbc1d6b03",
      "name": "Append row in sheet3",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1872,
        320
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Get the messy output from the AI Agent\nconst agentOutput = $input.item.json.output;\n\n// More robust JSON extraction\nlet jsonArray = [];\n\ntry {\n  // Try to find JSON array in the output\n  const jsonMatch = agentOutput.match(/\\[[\\s\\S]*?\\]/);\n  \n  if (jsonMatch) {\n    jsonArray = JSON.parse(jsonMatch[0]);\n    console.log(`Found ${jsonArray.length} items in JSON array`);\n  } else {\n    console.log(\"No JSON array found in output\");\n  }\n} catch (e) {\n  console.log(\"Error parsing JSON:\", e.message);\n  console.log(\"Raw output:\", agentOutput);\n}\n\nreturn jsonArray;"
      },
      "id": "77b93396-3d52-4ef6-9dd6-d60d6dc5ab1a",
      "name": "Code4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1584,
        320
      ],
      "disabled": true
    },
    {
      "parameters": {
        "url": "https://google.serper.dev/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `The search query for Google.`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "key"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "html"
            }
          }
        }
      },
      "id": "2abb734e-f68a-487d-9056-cad576b8d23c",
      "name": "Google Searcher3",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1504,
        544
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "return {json:{responce: \"ok\"}};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2144,
        320
      ],
      "id": "90485b0e-103f-4984-a5e0-81a045b13751",
      "name": "Code5",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "859e7a20-4eb0-4e35-bde4-4dd75bcf8c04",
              "leftValue": "={{ $json.chatInput }}",
              "rightValue": "20",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "ec967d78-9272-4bc1-94eb-beff3f9f42a0",
              "leftValue": "={{ $json.chatInput }}",
              "rightValue": "40",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "efd56079-b7a4-488d-b90e-f1e31b84d2e8",
              "leftValue": "={{ $json.chatInput }}",
              "rightValue": "60",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "b1b4d550-2085-4be3-a35f-5e7529ae2913",
              "leftValue": "={{ $json.chatInput }}",
              "rightValue": "80",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        0,
        0
      ],
      "id": "b7602a67-f51f-4ff0-808d-43459a2189b9",
      "name": "Filter",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c4aa9161-85f2-472b-a9d9-b20cc4a8ccc0",
              "leftValue": "={{ $json.chatInput }}",
              "rightValue": "40",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        400,
        512
      ],
      "id": "37a9535f-209d-4a5c-8976-1f7a22b8caa0",
      "name": "If1",
      "disabled": true
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a multi-step research agent. Your goal is to find detailed contact information for businesses.\n\n**Your process MUST follow these steps:**\n\n1.  First, use the `HTTP_Request` tool to get a basic list of businesses from Google Maps. This gives you the official Name, Address, and Website.\n\n2.  For EACH business from that list, you MUST use the `Google Searcher` tool to find the company's E-Mail address and the name of the Managing Director (Geschäftsführer). You should formulate smart queries like `\"Contact email for [Company Name]\"` or `\"Geschäftsführer of [Company Name]\"`.\n\n3.  After gathering all the information, output the complete data directly in the required JSON format. Your entire response must be ONLY the JSON array. Do not add any conversational text.\n\nThe required JSON format is:\n[\n  {\n    \"json\": {\n      \"Adresse\": \"...\",\n      \"Telefon\": \"'...\",\n      \"Name\": \"...\",\n      \"Webseite\": \"...\",\n      \"Bewertung\": \"...\",\n      \"E-Mail\": \"...\",\n      \"Geschäftsführer\": \"...\"\n    }\n  }\n]\n\nYour response should have all the 20 informations you got from the `HTTP_Request1` tool and the `Google Searcher tool`"
        }
      },
      "id": "2952b37c-f526-4e7a-b5eb-6a819d9a29b1",
      "name": "AI Agent4",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1360,
        752
      ],
      "disabled": true
    },
    {
      "parameters": {
        "contextWindowLength": 500
      },
      "id": "385127b1-aadc-4132-8165-43d745aa7b38",
      "name": "Simple Memory3",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1408,
        960
      ],
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Dieses Tool ist dafür da, dir zu helfen, alle Kontaktdaten aus Google Maps für Lead Generierung zu scrapen. Input query 'q' for search input, 'Il' for latitude and longitude of the map's center, 'page' is for the current page.",
        "url": "https://google.serper.dev/maps",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
            },
            {
              "name": "ll",
              "value": "=page=1"
            },
            {
              "name": "page",
              "value": "1"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "key"
            }
          ]
        },
        "options": {}
      },
      "id": "74313442-11b1-40a4-8025-8b6a6ee1d67e",
      "name": "HTTP Request3",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1552,
        960
      ],
      "disabled": true
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM",
          "mode": "list",
          "cachedResultName": "Praxis Coldcall",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Tabellenblatt1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Adresse": "={{ $json.Adresse }}",
            "Name": "={{ $json.Name }}",
            "Telefon ": "='{{ $json.Telefon }}",
            "Webseite": "={{ $json.Webseite }}",
            "Bewertung": "={{ $json.Bewertung }}",
            "E-Mail": "={{ $json['E-Mail'] }}",
            "Geschäftsführer": "={{ $json['Geschäftsführer'] }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Adresse",
              "displayName": "Adresse",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Name",
              "displayName": "Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Telefon ",
              "displayName": "Telefon ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Webseite",
              "displayName": "Webseite",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Bewertung",
              "displayName": "Bewertung",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "E-Mail",
              "displayName": "E-Mail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Geschäftsführer",
              "displayName": "Geschäftsführer",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "26001ec5-a2c4-4002-8899-97b0cc605229",
      "name": "Append row in sheet5",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2192,
        1024
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Get the messy output from the AI Agent\nconst agentOutput = $input.item.json.output;\n\n// More robust JSON extraction\nlet jsonArray = [];\n\ntry {\n  // Try to find JSON array in the output\n  const jsonMatch = agentOutput.match(/\\[[\\s\\S]*?\\]/);\n  \n  if (jsonMatch) {\n    jsonArray = JSON.parse(jsonMatch[0]);\n    console.log(`Found ${jsonArray.length} items in JSON array`);\n  } else {\n    console.log(\"No JSON array found in output\");\n  }\n} catch (e) {\n  console.log(\"Error parsing JSON:\", e.message);\n  console.log(\"Raw output:\", agentOutput);\n}\n\nreturn jsonArray;"
      },
      "id": "d4bacfeb-5d81-49a2-b82a-1144142dd050",
      "name": "Code6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1792,
        752
      ],
      "disabled": true
    },
    {
      "parameters": {
        "url": "https://google.serper.dev/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `The search query for Google.`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "key"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "html"
            }
          }
        }
      },
      "id": "b76761d8-db97-4ad0-9672-7fb00130c322",
      "name": "Google Searcher4",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1712,
        960
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "return {json:{responce: \"ok\"}};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2352,
        752
      ],
      "id": "9a2d1c38-dbf5-4179-ac3a-f463eb2be826",
      "name": "Code7",
      "disabled": true
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a multi-step research agent. Your goal is to find detailed contact information for businesses.\n\n**Your process MUST follow these steps:**\n\n1.  First, use the `HTTP_Request` tool to get a basic list of businesses from Google Maps. This gives you the official Name, Address, and Website.\n\n2.  For EACH business from that list, you MUST use the `Google Searcher` tool to find the company's E-Mail address and the name of the Managing Director (Geschäftsführer). You should formulate smart queries like `\"Contact email for [Company Name]\"` or `\"Geschäftsführer of [Company Name]\"`.\n\n3.  After gathering all the information, output the complete data directly in the required JSON format. Your entire response must be ONLY the JSON array. Do not add any conversational text.\n\nThe required JSON format is:\n[\n  {\n    \"json\": {\n      \"Adresse\": \"...\",\n      \"Telefon\": \"'...\",\n      \"Name\": \"...\",\n      \"Webseite\": \"...\",\n      \"Bewertung\": \"...\",\n      \"E-Mail\": \"...\",\n      \"Geschäftsführer\": \"...\"\n    }\n  }\n]\n\nYour response should have all the 20 informations you got from the `HTTP_Request1` tool and the `Google Searcher tool`"
        }
      },
      "id": "7db55ff3-68fc-4ba9-9ec7-6df2210d3d43",
      "name": "AI Agent5",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1328,
        1184
      ],
      "disabled": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "id": "201eb0ec-4488-438d-a24c-b39aa813aa9e",
      "name": "OpenAI Chat Model6",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1152,
        1408
      ],
      "disabled": true
    },
    {
      "parameters": {
        "contextWindowLength": 500
      },
      "id": "1e847aa7-f292-4662-81a2-1c8f61b6cd32",
      "name": "Simple Memory4",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1312,
        1408
      ],
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Dieses Tool ist dafür da, dir zu helfen, alle Kontaktdaten aus Google Maps für Lead Generierung zu scrapen. Input query 'q' for search input, 'Il' for latitude and longitude of the map's center, 'page' is for the current page.",
        "url": "https://google.serper.dev/maps",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
            },
            {
              "name": "ll",
              "value": "=page=2"
            },
            {
              "name": "page",
              "value": "=2"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "key"
            }
          ]
        },
        "options": {}
      },
      "id": "b2212a29-fdd2-49cb-ada9-a301399580f0",
      "name": "HTTP Request4",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1440,
        1408
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Get the messy output from the AI Agent\nconst agentOutput = $input.item.json.output;\n\n// More robust JSON extraction\nlet jsonArray = [];\n\ntry {\n  // Try to find JSON array in the output\n  const jsonMatch = agentOutput.match(/\\[[\\s\\S]*?\\]/);\n  \n  if (jsonMatch) {\n    jsonArray = JSON.parse(jsonMatch[0]);\n    console.log(`Found ${jsonArray.length} items in JSON array`);\n  } else {\n    console.log(\"No JSON array found in output\");\n  }\n} catch (e) {\n  console.log(\"Error parsing JSON:\", e.message);\n  console.log(\"Raw output:\", agentOutput);\n}\n\nreturn jsonArray;"
      },
      "id": "6d896150-899b-4a5c-a7ac-791a17c67c9b",
      "name": "Code8",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1744,
        1184
      ],
      "alwaysOutputData": false,
      "disabled": true
    },
    {
      "parameters": {
        "url": "https://google.serper.dev/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `The search query for Google.`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "key"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "html"
            }
          }
        }
      },
      "id": "dd5a128d-f97b-4f60-a4bb-3a8d4c970e98",
      "name": "Google Searcher5",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1600,
        1408
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "return {json:{responce: \"ok\"}};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2400,
        1184
      ],
      "id": "c91e4ebe-4c26-4f8b-bdec-f83ecb925039",
      "name": "Code9",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.aiTransform",
      "typeVersion": 1,
      "position": [
        2592,
        1392
      ],
      "id": "c726d9e4-aade-4ca5-a357-231123c8ef69",
      "name": "AI Transform",
      "disabled": true
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a multi-step research agent. Your goal is to find detailed contact information for businesses.\n\n**Your process MUST follow these steps:**\n\n1.  First, use the `HTTP_Request` tool to get a basic list of businesses from Google Maps. This gives you the official Name, Address, and Website.\n\n2.  For EACH business from that list, you MUST use the `Google Searcher` tool to find the company's E-Mail address and the name of the Managing Director (Geschäftsführer). You should formulate smart queries like `\"Contact email for [Company Name]\"` or `\"Geschäftsführer of [Company Name]\"`.\n\n3.  After gathering all the information, output the complete data directly in the required JSON format. Your entire response must be ONLY the JSON array. Do not add any conversational text.\n\nThe required JSON format is:\n[\n  {\n    \"json\": {\n      \"Adresse\": \"...\",\n      \"Telefon\": \"'...\",\n      \"Name\": \"...\",\n      \"Webseite\": \"...\",\n      \"Bewertung\": \"...\",\n      \"E-Mail\": \"...\",\n      \"Geschäftsführer\": \"...\"\n    }\n  }\n]\n\nYour response should have all the 20 informations you got from the `HTTP_Request1` tool and the `Google Searcher tool`"
        }
      },
      "id": "bf534c6d-7039-43a9-a24d-b0c88e4371ee",
      "name": "AI Agent6",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1424,
        2032
      ],
      "disabled": true
    },
    {
      "parameters": {
        "contextWindowLength": 500
      },
      "id": "9a0aef62-2c90-4e2f-b9d2-d195ef4c4f33",
      "name": "Simple Memory5",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1472,
        2240
      ],
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Dieses Tool ist dafür da, dir zu helfen, alle Kontaktdaten aus Google Maps für Lead Generierung zu scrapen. Input query 'q' for search input, 'Il' for latitude and longitude of the map's center, 'page' is for the current page.",
        "url": "https://google.serper.dev/maps",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
            },
            {
              "name": "ll",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            },
            {
              "name": "page",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', ``, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "key"
            }
          ]
        },
        "options": {}
      },
      "id": "d2be62b8-738f-44eb-9bd5-c1cc465c39d5",
      "name": "HTTP Request5",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1600,
        2240
      ],
      "disabled": true
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM",
          "mode": "list",
          "cachedResultName": "Praxis Coldcall",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Tabellenblatt1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Adresse": "={{ $json.Adresse }}",
            "Name": "={{ $json.Name }}",
            "Telefon ": "='{{ $json.Telefon }}",
            "Webseite": "={{ $json.Webseite }}",
            "Bewertung": "={{ $json.Bewertung }}",
            "E-Mail": "={{ $json['E-Mail'] }}",
            "Geschäftsführer": "={{ $json['Geschäftsführer'] }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Adresse",
              "displayName": "Adresse",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Name",
              "displayName": "Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Telefon ",
              "displayName": "Telefon ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Webseite",
              "displayName": "Webseite",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Bewertung",
              "displayName": "Bewertung",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "E-Mail",
              "displayName": "E-Mail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Geschäftsführer",
              "displayName": "Geschäftsführer",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "e1383f99-2c43-4169-ba4c-c6bc5d43ed1f",
      "name": "Append row in sheet6",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2128,
        2032
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Get the messy output from the AI Agent\nconst agentOutput = $input.item.json.output;\n\n// More robust JSON extraction\nlet jsonArray = [];\n\ntry {\n  // Try to find JSON array in the output\n  const jsonMatch = agentOutput.match(/\\[[\\s\\S]*?\\]/);\n  \n  if (jsonMatch) {\n    jsonArray = JSON.parse(jsonMatch[0]);\n    console.log(`Found ${jsonArray.length} items in JSON array`);\n  } else {\n    console.log(\"No JSON array found in output\");\n  }\n} catch (e) {\n  console.log(\"Error parsing JSON:\", e.message);\n  console.log(\"Raw output:\", agentOutput);\n}\n\nreturn jsonArray;"
      },
      "id": "96666332-9a9c-40ea-ac9d-c6f4004e5475",
      "name": "Code10",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1840,
        2032
      ],
      "disabled": true
    },
    {
      "parameters": {
        "url": "https://google.serper.dev/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `The search query for Google.`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "key"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "html"
            }
          }
        }
      },
      "id": "1f2b1c47-1233-47da-9f26-aea634a49f75",
      "name": "Google Searcher6",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1760,
        2240
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "return {json:{responce: \"ok\"}};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2400,
        2032
      ],
      "id": "ce666cc3-b4ba-4dd5-8bb8-a5bbc765224f",
      "name": "Code11",
      "disabled": true
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are an autonomous, multi-step research agent. Your goal is to orchestrate a complete research and data-gathering process to compile a list of exactly 100 unique business contacts.\n\nYour Autonomous Process:\n\nInitialization: You will be given a high-level command like \"Find 100 businesses in Frankfurt\". You must interpret this to determine the search query (q) and the geographical coordinates (ll) needed for the HTTP_Request tool. Initialize an empty list for your final results and a separate internal list to track processed company names for de-duplication. Start with page = 1.\n\nPaginated Scraping: Call the HTTP_Request tool using the query, coordinates, and the current page number to get a list of businesses.\n\nProcess and Enrich: For EACH business returned from the HTTP_Request tool:\n\nA. De-duplication Check: Before doing any work, check if the business Name is already in your internal list of processed companies. If it is, IGNORE this business and move to the next one.\n\nB. Goal Check: If your final results list already contains 100 businesses, STOP the entire process immediately.\n\nC. Enrichment: If the business is new, use the Google Searcher tool to find the E-Mail and Geschäftsführer.\n\nD. Aggregation: Combine the original data (Name, Adresse, etc.) with the new data (E-Mail, Geschäftsführer) into the required JSON format. Add this complete JSON object to your final results list and add the company Name to your processed list.\n\nIncrement and Loop: After processing all businesses on the current page, increment the page number (page = page + 1) and go back to Step 2. Continue this cycle until you have 100 unique results.\n\nFinal Output: Once you have collected exactly 100 unique businesses, your ONLY response must be the final, complete JSON array containing all 100 results. Do not add any other text, explanation, or summary.",
          "maxIterations": 5000
        }
      },
      "id": "86c068de-21ce-43d2-97c9-0b3235fb85fc",
      "name": "AI Agent2",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        3968,
        2144
      ],
      "disabled": true
    },
    {
      "parameters": {
        "contextWindowLength": 500
      },
      "id": "005d6a0e-030f-4423-be8e-c340b02cfa93",
      "name": "Simple Memory6",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        3984,
        2384
      ],
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Dieses Tool ist dafür da, dir zu helfen, alle Kontaktdaten aus Google Maps für Lead Generierung zu scrapen. Input query 'q' for search input, 'Il' for latitude and longitude of the map's center, 'page' is for the current page.",
        "url": "https://google.serper.dev/maps",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
            },
            {
              "name": "ll",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            },
            {
              "name": "page",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', ``, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "key"
            }
          ]
        },
        "options": {}
      },
      "id": "4fbdd3ea-95cc-41e2-9f5c-70d119c6f8b6",
      "name": "HTTP Request6",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        4144,
        2368
      ],
      "disabled": true
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM",
          "mode": "list",
          "cachedResultName": "Praxis Coldcall",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Tabellenblatt1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1bn0ULt7ggHsDRCF5SMASdybLDTwUMMZSd0bHUG_t-MM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Adresse": "={{ $json.Adresse }}",
            "Name": "={{ $json.Name }}",
            "Telefon ": "='{{ $json.Telefon }}",
            "Webseite": "={{ $json.Webseite }}",
            "Bewertung": "={{ $json.Bewertung }}",
            "E-Mail": "={{ $json['E-Mail'] }}",
            "Geschäftsführer": "={{ $json['Geschäftsführer'] }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Adresse",
              "displayName": "Adresse",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Name",
              "displayName": "Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Telefon ",
              "displayName": "Telefon ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Webseite",
              "displayName": "Webseite",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Bewertung",
              "displayName": "Bewertung",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "E-Mail",
              "displayName": "E-Mail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Geschäftsführer",
              "displayName": "Geschäftsführer",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "edc9d807-ec26-4326-9159-27bba31ac8f2",
      "name": "Append row in sheet4",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        4672,
        2144
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Get the messy output from the AI Agent\nconst agentOutput = $input.item.json.output;\n\n// More robust JSON extraction\nlet jsonArray = [];\n\ntry {\n  // Try to find JSON array in the output\n  const jsonMatch = agentOutput.match(/\\[[\\s\\S]*?\\]/);\n  \n  if (jsonMatch) {\n    jsonArray = JSON.parse(jsonMatch[0]);\n    console.log(`Found ${jsonArray.length} items in JSON array`);\n  } else {\n    console.log(\"No JSON array found in output\");\n  }\n} catch (e) {\n  console.log(\"Error parsing JSON:\", e.message);\n  console.log(\"Raw output:\", agentOutput);\n}\n\nreturn jsonArray;"
      },
      "id": "c55dd301-eccd-4eeb-bfad-1fc07d67df36",
      "name": "Code12",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4384,
        2144
      ],
      "disabled": true
    },
    {
      "parameters": {
        "url": "https://google.serper.dev/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `The search query for Google.`, 'string') }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "key"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "html"
            }
          }
        }
      },
      "id": "b8c17760-bd65-4b67-8228-f1cbaeb58f43",
      "name": "Google Searcher1",
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        4304,
        2368
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "return {json:{responce: \"ok\"}};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4944,
        2144
      ],
      "id": "46c2379a-04fb-4642-bbe8-244beb8ff8e6",
      "name": "Code13",
      "disabled": true
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Parse inhalt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse inhalt": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call n8n Workflow Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Website Scraper": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Append row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Append row in sheet2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Searcher": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet2": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent3": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "ai_tool": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet3": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Append row in sheet3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Searcher3": {
      "ai_tool": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent4": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory3": {
      "ai_memory": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "ai_tool": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Append row in sheet5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Searcher4": {
      "ai_tool": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent5": {
      "main": [
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory4": {
      "ai_memory": [
        [
          {
            "node": "AI Agent5",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request4": {
      "ai_tool": [
        [
          {
            "node": "AI Agent5",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "Append row in sheet5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Searcher5": {
      "ai_tool": [
        [
          {
            "node": "AI Agent5",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent6": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory5": {
      "ai_memory": [
        [
          {
            "node": "AI Agent6",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request5": {
      "ai_tool": [
        [
          {
            "node": "AI Agent6",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet6": {
      "main": [
        [
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "Append row in sheet6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Searcher6": {
      "ai_tool": [
        [
          {
            "node": "AI Agent6",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory6": {
      "ai_memory": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request6": {
      "ai_tool": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet4": {
      "main": [
        [
          {
            "node": "Code13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "Append row in sheet4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Searcher1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "",
  "meta": {
    "instanceId": "6ed3d60117c1ed3038584ebd7e9126b8f4024e0d640174242fec9cff69e12513"
  },
  "tags": []
}